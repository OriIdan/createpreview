#!/usr/bin/perl
# Create preview EPUB out of given EPUB
# Written by: Ori Idan <ori@heliconbooks.com>
# License: GPL v. 3 (http://www.gnu.org/copyleft/gpl.html)
$version = "2.0";
# This script takes an EPUB file, unpacks it, removes spine items 
# leaving a predefined number of spine items.
# It will add metadata according to http://www.idpf.org/epub/previews/
use Getopt::Long;
use XML::Parser;
use File::Basename;
use File::Copy qw(copy move);
use File::Path 'rmtree';
use DateTime;
use Cwd;
use I18N::Langinfo qw(langinfo CODESET);
use Encode qw(decode);
use Archive::Zip;
binmode STDOUT, ":utf8";

$tmpbase = "staging";

use constant {
	NONE => 0,
	META => 100,
	DCID => 101,
	DCMOD => 102,
	MANIFEST => 200,
	SPINE => 300,
	NAV => 400,
	NAVOL => 401,
	NAVLI => 402,
	NAVLIA => 403,
};

$state = NONE;

if(($#ARGV + 1) < 2) {
	print "Create EPUB preview from given EPUB (version: $version)\n";
	print "usage: createpreview [options] <epubfile> <num>\n";
	print "options are:\n";
	print "-o <outputfile> - Set output file name (default overwrite original)\n";
	print "-a <acqlink> - Set acquisition link for original file\n";
	print "--catalog <catalog> - Set link to OPDS catalog containing the original file\n";
	print "-i <identifier> - Set new identifier for file\n";
	print "--identifier <identifier> - Same as -i\n";
	print "-h <xhtml file> - XHTML file to add at end of new book\n";
	exit;
}

$codeset = langinfo(CODESET);
@ARGV = map { decode $codeset, $_ } @ARGV;

# Get command line arguments
$result = GetOptions("o=s" => \$newfile, "a=s" => \$acqlink, 
	"catalog=s" => \$catlink,
	"i=s" => \$identifier, "identifier=s" => \$identifier, "h=s" => \$htmlfile);
$epubname = $ARGV[0];
$numchap = $ARGV[1];

if(!$newfile) {
	$newfile = $epubname;
}

($basename, $oepbsdir, $ext) = fileparse($epubname, qr/\.[^.]*/);

$tempdir = "$tmpbase/$basename";

if(!mkdir($tempdir)) {
	$err = $!;
	if($err ne 'File exists') {
		print "Error: $!\n";
		die;
	}
}

# Extracting file to temporary directory
#system("unzip -u $epubname -d $tempdir");
$zipfile = Archive::Zip->new();
$status = $zipfile->read($epubname);
if($status != AZ_OK) {
	die("Error extracting $epubname");
}
$zipfile->extractTree('', "$tempdir/");

$container = "$tempdir/META-INF/container.xml";
if(! -e $container) {
	print "Error: $tempdir/META-INF/container.xml file does not exist\n";
	exit;
}

if($htmlfile) {
	# If we have HTML file to add, parse it for additional files such as images and CSS files
	@additionalfiles = ($htmlfile);	# Initialize array of additional files
	$hparse = new XML::Parser(Handlers => {Start => \&h_start });
	$hparse->parsefile($htmlfile);
}

sub h_start {
	my ($p, $elt, %atts) = @_;
	if($elt eq 'link') {	# This might be a CSS file
		$addedfile = $atts{'href'};
		push @additionalfiles, $addedfile;
	}
	elsif($elt eq 'img') {	# This is an image file
		$addedfile = $atts{'src'};
		push @additionalfiles, $addedfile;
	}
}

sub GetMediaType {
	$ext = shift;
	
	if(($ext eq 'html') || ($ext eq 'xhtml')) {
		return "application/xhtml+xml";
	}
	if($ext eq 'png') {
		return "image/png";
	}
	if(($ext eq 'jpg') || ($ext eq 'jpeg')) {
		return "image/jpeg";
	}
	if($ext eq 'ttf') {
		return "application/x-font-ttf";
	}
	return '';
}

$cparse = new XML::Parser(Handlers => {Start => \&hdl_start });

$cparse->parsefile($container);

sub hdl_start {
	my ($p, $elt, %atts) = @_;
	if($elt eq 'rootfile') {
		$rootfile = $atts{'full-path'};
		print "#Root file: $tempdir/$rootfile\n";
		$rootfile =~ /(.*)\/.*/;
		$base = "$tempdir/$1";
		print "Base: $base\n";
		AnalyzeOPF();
	}
}

sub AnalyzeOPF {
	$parseopf = new XML::Parser(Handlers => {'Start' => \&opf_start, 
											 'End' => \&opf_end,
											 'Char' => \&opf_char
											 });
	($n, $oebpsdir, $ext) = fileparse($rootfile);
	print "Processing OPF $tempdir/$rootfile\n";
	# Initialize remove list
	@remlist = ();
	$counter = 0;
	$parseopf->parsefile("$tempdir/$rootfile");
	# We now know which id's we are going to remove
	# We have to remove them from 3 places:
	#   1. OPF file
	#   2. NCX file (if exists)
	#   3. EPUB3 toc file (if exists)
	WriteOPF("$tempdir/$rootfile");
	# Handle EPUB3 toc file
	if($tocfile) {
		HandleTocFile($tocfile);
	}
	if($ncxfile) {
		HandleNCX($ncxfile);
	}
	# We are done now with the 3 files we need to change, now pack the EPUB file
	$outzip = Archive::Zip->new();
	$outzip->addFile("$tempdir/mimetype", 'mimetype', 0);
	$outzip->addTree("$tempdir/META-INF", 'META-INF');
	print "Adding $tempdir/$rootfile\n";
	$outzip->addFile("$tempdir/$rootfile", $rootfile);
	$parseopf = new XML::Parser(Handlers => {'Start' => \&opf_packstart});
	print "Pack handleOPF $rootfile\n";
	($n, $oepbsdir, $ext) = fileparse($rootfile);
	$parseopf->parsefile("$tempdir/$rootfile");
	unless($outzip->writeToFileNamed($newfile) == AZ_OK) {
		print "Error writing to $newfile\n";
	}
	rmtree([ $tempdir ]);
}

sub opf_packstart {
	my ($p, $elt, %atts) = @_;
	
	if($elt eq 'metadata') {
		$state = META;	
	}
	elsif($elt eq 'manifest') {
		$state = MANIFEST;
	}
	elsif($elt eq 'spine') {
		$state = SPINE;
	}
	if($state == META) {
		if($atts{'name'} eq 'cover') {
			$coverid = $atts{'content'};
		}
	}
	if($state == MANIFEST) {
		if($elt eq 'item') {
			$ref = $atts{'href'};
			print "Adding file: $tempdir/$oepbsdir$ref\n";
#			system("zip -Xr9Dq tmp.zip $oepbsdir$ref");
			$outzip->addFile("$tempdir/$oepbsdir$ref", "$oepbsdir$ref");
		}
	}
}

sub opf_start {
	my ($p, $elt, %atts) = @_;

	if($elt eq 'package') {
		$bookid = $atts{'unique-identifier'};
	}
	if($elt eq 'metadata') {
		$state = META;
	}
	if($elt eq 'manifest') {
		$state = MANIFEST;
	}
	if($elt eq 'spine') {
		$state = SPINE;
	}
	if($state == META) {
		if($atts{'id'} eq $bookid) {
			$state = DCID;
		}
		if($atts{'property'} eq 'dcterms:modified') {
			$state = DCMOD;
		}
	}
	if($state == MANIFEST) {
		if($atts{'media-type'} =~ /dtbncx/) {
			$ncxfile = $atts{'href'};
			$ncxfile = "$base/$ncxfile";
			print "NCX: $ncxfile\n";
		}
		if($atts{'properties'} =~ /nav/) {
			$tocfile = $atts{'href'};
			$tocfile = "$base/$tocfile";
			print "TOC: $tocfile\n";
		}
	}
	if($state == SPINE) {
		if($elt eq 'itemref') {
			if(($counter <= $numchap) && ($atts{'linear'} ne 'no')) {
				$counter++;
			}
			if(($counter > $numchap) && ($atts{'linear'} ne 'no')) {
				push(@remlist, $atts{'idref'});
			}
		}
	}
}

sub opf_end {
	my ($p, $elt, %atts) = @_;

	if(($state == DCMOD) || ($state == DCID)) {
		$state = META;
	}
	if($elt eq 'metadata') {
		$state = NONE;
	}
	elsif($elt eq 'manifest') {
		$state = NONE;
	}
	elsif($elt eq 'spine') {
		$state = NONE;
	}
	elsif($elt eq 'package') {
		$state = NONE;
	}
}

sub opf_char {
	my ($p, $str) = @_;
	
	if($state == DCID) {
		$bookidval = $str;
	}
}

# Create new OPF
# It is assumed that @remlist contains list of id's to be removed
sub WriteOPF {
	$opf = shift;

	$tmpopf = "$opf.tmp";	
	open(IN, $opf);
	binmode IN, ":utf8";
	open(OUT, ">$tmpopf");
	binmode OUT, ":utf8";
	
	$state = 0;
	$noprint = 0;
	while(<IN>) {
		if($state == NONE) {
			if(/metadata/) {
				$state = META;
			}
			elsif(/manifest/) {
				$state = MANIFEST;
			}
			else {
				print OUT $_;
			}
		}
		if($state == META) {
			if(/id="(.*?)"/) {
				if($1 eq $bookid) {	# Change book id since ID must not be the same as original id
					if($identifier) {
						$cid = $identifier;
					}
					else {
						$cid = "p_$bookidval";
					}
					print OUT "<dc:identifier id=\"$bookid\">$cid</dc:identifier>\n";
				}
			}
			elsif(/dcterms:modified/) {
				$dt = DateTime->now();
				$dtstr = $dt->ymd('-')  . "T" . $dt->hms(':') . "Z";
				print "dtstr: $dtstr\n";
				print OUT "<meta property=\"dcterms:modified\">$dtstr</meta>\n"; 
			}
			elsif(/<\/metadata/) {
				print OUT "<dc:type>preview</dc:type>\n";
				print OUT "<dc:source>$bookidval</dc:source>\n";
				if($acqlink) {
					print OUT "<link href=\"$acqlink\" rel=\"acquire\" type=\"text/html\" />\n";
				}
				if($catlink) {
					print OUT "<link href=\"$catlink\" rel=\"acquire\" type=\"application/atom+xml;type=entry;profile=opds-catalog\" />\n";
				}
				print OUT $_;
				$state = NONE;
			}
			else {
				print OUT $_;
			}
		}
		if($state == MANIFEST) {
			if(/spine/) {
				$state = SPINE;
				$noprint = 1;
			}
			if(/\/manifest/) {	# closing tag of manifest section, write additonal files if any
				foreach $addfile (@additionalfiles) {
					print "Copy: $addfile to $base\n";
					copy($addfile, $base);
					$addfile =~ /(.*)\.(.*)/;
					$b = $1;
					$ext = $2;
					$mediatype = GetMediaType($ext);
					print OUT "<item id=\"$b\" href=\"$addfile\" media-type=\"$mediatype\" />\n";
				}
			}
			$line = $_;
			$line =~ /id="(.*?)"/;
			$id = $1;
			if(grep $_ eq $id, @remlist) {
				$noprint = 1;
			}
			if($noprint == 0) {
				print OUT $line;
			}
			if($noprint && ($line =~ /\/>/)) {
				$noprint = 0;
			}			
		}
		if($state == SPINE) {
			$line = $_;
			$line =~ /idref="(.*)"/;
			$id = $1;
			if(grep $_ eq $id, @remlist) {
				$noprint = 1;
			}
			elsif($line !~ /\/spine/) {
				print OUT $line;
				$noprint = 0;
			}
			if($line =~ /\/spine/) {
				if($htmlfile) {	# add file to spine
					$htmlfile =~ /(.*)\..*/;
					$base = $1;
					print OUT "<itemref idref=\"$base\" />\n";
				}
				print OUT $line;
				$state = NONE;
			}
		}
	}
	close(OUT);
	close(IN);
	copy($tmpopf, $opf);
}

# Delete unneeded id's from TOC file
# It is assumed that same id's used in TOC file as used in OPF
# This is not a requirement of the standard therefore we are running a risk here.
# From my experience it is rare to see different id's in TOC file.
sub HandleTocFile {
	$tocfile = shift;
	
	$tmptoc = "$tocfile.tmp";
	open(IN, $tocfile);
	binmode IN, ":utf8";
	open(OUT, ">$tmptoc");
	binmode OUT, ":utf8";
	
	$state = NONE;
	while(<IN>) {
		if($state == NONE) {
			if(/<nav/) {
				$state = NAV;
			}
			print OUT $_;
		}
		elsif($state == NAV) {	# We are waiting for <ol>
			if(/ol/) {
				$state = NAVOL;
			}
			print OUT $_;
		}
		elsif($state == NAVOL) {	# Every tag now is <li> tag
			$line = $_;
			if($line =~ /li id="(.*?)"/) {
				$id = $1;
				if(grep $_ eq $id, @remlist) {
					$noprint = 1;
				}
				if($noprint == 0) {
					print OUT $line;
				}
				if($line =~ /<\/li/) {
					$noprint = 0;
				}
			}
			if($line =~ /ol/) {
				$state = NONE;
				print OUT $line;
			}
		}
	}
	close(IN);
	close(OUT);
	copy($tmptoc, $tocfile);
}

# Delete unneeded id's from NCX file
# It is assumed that id's here are the same as used in OPF file
# Note that NCX structure is much more complicated then TOC file structure
sub HandleNCX {
	$ncxfile = shift;
	
	$tmpncx = "$ncxfile.tmp";
	open(IN, $ncxfile);
	binmode IN, ":utf8";
	open(OUT, ">$tmpncx");
	binmode OUT, ":utf8";

	$state = NONE;
	$po = 1;	# We handle play order no matter what is written in NCX file
	while(<IN>) {
		if($state == NONE) {
			if(/dtb:uid/) {
				$_ = "<meta name=\"dtb:uid\" content=\"$cid\"/>\n";
			}
			if(/<navmap/i) {
				$state = NAV;
			}
			print OUT $_;
		}
		elsif($state == NAV) {
			$line = $_;
			if(/<navPoint.*id="(.*?)"/i) {
				$id = $1;
				if(grep $_ eq $id, @remlist) {
					$noprint = 1;
				}
				if($noprint == 0) {
					print OUT "<navPoint class=\"chapter\" id=\"$id\" playOrder=\"$po\">\n";
					$po++;
				}
			}
			elsif($noprint == 0) {
				print OUT $line;
			}
			if(/<\/navPoint/i) {
				$noprint = 0;
			}
		}
	}
	close(IN);
	close(OUT);
	copy($tmpncx, $ncxfile);
}
